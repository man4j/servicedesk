<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="ru-ru" xml:lang="ru-ru" class="no-feedback" data-mc-search-type="Stem" data-mc-help-system-file-name="HelpScripting.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <style></style>
    </head>
    <body>
        <h1 data-mc-conditions="Default.HelpScripting">Скрипт фильтрации атрибутов при редактировании</h1>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="description"></a>Описание скрипта</h3>
        <p class="one1">Скрипт  фильтрации определяет список возможных значений атрибута. Скрипт предназначен  для визуального ограничения списка возможных значений при редактировании атрибутов в интерфейсе пользователя.</p>
        <p class="Subtitle" data-mc-conditions="">Структура скрипта:</p>
        <p>Формально скрипт состоит из двух частей:</p>
        <ul>
            <li value="1">
                <p> Часть, вычисляемая в интерфейсе технолога (subject == null). Возвращается список кодов атрибута, от которых зависит данный атрибут</p>
                <p class="listing">def ATTRS_FOR_UPDATE_ON_FORMS = ['attrCode1', 'attrCode2', ...]
</p>
                <p class="listing">// обязательная проверка! Даже если фильтрующих атрибутов нет.</p>
                <p class="listing">if (subject == null)
</p>
                <p class="listing">{</p>
                <p class="listing">
    return ATTRS_FOR_UPDATE_ON_FORMS</p>
                <p class="listing">
}</p>
            </li>
            <li value="2">
                <p> Часть, вычисляемая в интерфейсе пользователя (в момент открытия формы). Возвращается список объектов, которые будут отображаться в списке.</p>
                <p class="listing"> return utils.find('class$type',['attrCode1':'value1']...);</p>
            </li>
        </ul>
        <p class="Subtitle">Когда выполняется скрипт:</p>
        <ul>
            <li value="1">При открытии формы, на которой расположен фильтруемый атрибут.</li>
            <li value="2">При изменении в полях формы значений атрибутов, от которых зависит фильтруемый атрибут.      
        </li>
        </ul>
        <p class="Subtitle">Результат выполнения скрипта:</p>
        <p>В интерфейсе технолога: скрипт возвращает  коллекцию (список) кодов атрибутов, от которых зависят возможные значения фильтруемого атрибута. Условие выполнения скрипта 
subject==null. Если значение фильтруемого атрибута не&#160;зависит ни от одного из атрибутов объекта, то возвращается пустой список [].</p>
        <p>В интерфейсе пользователя: скрипт возвращает  коллекцию (список) объектов, доступных для выбора. Если скрипт не&#160;обнаружил ни одного объекта, удовлетворяющего условиями фильтрации, то возвращается "пусто", что означает отсутствие значений, доступных для выбора.</p>
        <p>Скрипт возвращает один объект, если используется для фильтрации значений атрибута типа "Ссылка на бизнес-объект".</p>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="var"></a>Переменные контекста и их значения</h3>
        <p>Глобальные переменные контекста:</p>
        <ul>
            <li value="1">
                <p><b>user</b> — пользователь, инициализировавший событие. Является объектом класса <span class="BaseСотрудник">(Undefined variable: Base.Сотрудник)</span>). </p>
                <p>Если событие инициализировал суперпользователь, 
					то user=null. </p>
                <p>Если событие инициализировано скриптом (скриптовое действие по событию, скрипт на вход в статус), то переменная user берется из контекста инициировавшего его скрипта. </p>
                <p>Пример: пользователь выполнил изменение атрибута --&gt; произошло изменение статуса объекта (действие по событию) --&gt; произошло изменение ответственного (действие на вход в статус) --&gt; произошло оповещение (действие по событию) .Во всех скриптах этой цепочки переменная user должна содержать сторудника, выполнившего первоначальное изменение атрибута.                        </p>
            </li>
            <li value="2"><b>ip</b> — ip пользователя user.</li>
            <li value="3"><b>api</b> — содержит доступные вспомогательные методы. Например api.utils, api.ldap, api.timing,....</li>
            <li value="4"><b>modules</b> — содержит доступные модули, загруженные в интерфейсе технолога (набор библиотек написанных на groovy).</li>
            <li value="5"><b>appVersion</b> — версия приложения.</li>
            <li value="6"><b>logger</b> — объект консоли (для логирования), используется только при выполнении скриптов через консоль.</li>
            <li value="7"><b>utils</b> — Синоним api.utils.</li>
        </ul>
        <p>&#160;</p>
        <ul>
            <li value="1">
                <p><b>subject</b> — владелец атрибута.</p>
                <p>Переменная может использоваться во всех скриптах фильтрации, включая скрипты на форме добавления (subject не null). Если скрипт используется на форме добавления, то в переменной subject содержится только набор определяющих фильтрацию атрибутов.</p>
            </li>
            <li value="2">
                <p><b>permittedFqns</b> — список разрешенных типов объектов.</p>
                <p class="one1">В ссылочных атрибутах типа "Ссылка на бизнес-объект" и "Набор ссылок на бизнес-объекты" можно ограничить список возможных значений по типам (с помощью параметра атрибута "Типы объектов"). В этом случае целесообразно использование переменной permittedFqns. Переменная хранит "ClassFqn" для типов, выбранных в поле "Тип", и позволяет  фильтровать  объекты только указанных типов, что повышает производительность системы. Если выбран класс, то  переменная хранит пустую коллекцию. Если переменная не&#160;используется, то ограничения по типам не&#160;нарушаются. </p>
            </li>
        </ul>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="example"></a>Примеры скрипта</h3>
        <ol>
            <li value="1" data-mc-conditions="">
                <p>Скрипт фильтрации простого раскрывающегося списка объектов (не&#160;дерева):</p>
                <p class="listing">//ПАРАМЕТРЫ------------------------------------------------------------</p>
                <p class="listing">def ATTRS_FOR_UPDATE_ON_FORMS = ['metaClass'];//список кодов атрибутов объекта, от которых зависит фильтрация,</p>
                <p class="listing">необходимо для обновления фильтруемого селекта на форме при изменении этих атрибутов.</p>
                <p class="listing">//ОСНОВНОЙ БЛОК--------------------------------------------------------</p>
                <p class="listing">// Если subject = null, нужно вернуть список кодов атрибутов, от которых зависит фильтруемый атрибут</p>
                <p class="listing">if(null == subject)</p>
                <p class="listing">{</p>
                <p class="listing">return ATTRS_FOR_UPDATE_ON_FORMS;</p>
                <p class="listing">}</p>
                <p class="listing">// возвращаем без фильтрации список отделов</p>
                <p class="listing">objects = api.utils.find("ou", [:]);</p>
                <p class="listing">return objects;</p>
                <p class="listing">}</p>
            </li>
            <li value="2" data-mc-conditions="">
                <p>Скрипт фильтрации раскрывающегося списка объектов в виде дерева. Скрипт возвращает все вложенные в ou$1234 отделы:</p>
                <p class="listing">// Скрипт возвращает все вложенные в ou$1234 отделы</p>
                <p class="listing">//ПАРАМЕТРЫ------------------------------------------------------------</p>
                <p class="listing">def ATTRS_FOR_UPDATE_ON_FORMS = [];//список кодов атрибутов объекта, от которых зависит фильтрация,</p>
                <p class="listing">необходимо для обновления фильтруемого селекта на форме при изменении этих атрибутов.</p>
                <p class="listing">def PARENT_OU_UUID = 'ou$1234'; //UUID отдела, вложенные отделы в который, необходимо получить</p>
                <p class="listing">//ОСНОВНОЙ БЛОК--------------------------------------------------------</p>
                <p class="listing">if(null == subject)</p>
                <p class="listing">{</p>
                <p class="listing">return ATTRS_FOR_UPDATE_ON_FORMS;</p>
                <p class="listing">}</p>
                <p class="listing">def objects = [];</p>
                <p class="listing">objects = api.ou.listNestedOUs(PARENT_OU_UUID);</p>
                <p class="listing">return objects;</p>
            </li>
            <li value="3" data-mc-conditions="">
                <p>Скрипт фильтрации агрегирующих атрибутов:</p>
                <p class="listing">if (subject == null)</p>
                <p class="listing">{</p>
                <p class="listing">return [] // возвращаем пустой список кодов атрибутов, от которых зависит фильтрация</p>
                <p class="listing">}</p>
                <p class="listing">return [</p>
                <p class="listing">//в качестве значения атрибута можно выбрать только сотрудника, рамках его отдела и команд, в которых он является участником</p>
                <p class="listing">'employee$2241',</p>
                <p class="listing">//в качестве значения атрибута можно выбрать только команду</p>
                <p class="listing">'team$2104',</p>
                <p class="listing">//в качестве значения атрибута можно выбрать только отдел</p>
                <p class="listing">'ou$1901',</p>
                <p class="listing">//в качестве значения атрибута можно выбрать сотрудников, участников команды</p>
                <p class="listing">['team$2107': ['employee$2213', 'employee$2214']],</p>
                <p class="listing">//в качестве значения атрибута можно выбрать сотрудников отдела</p>
                <p class="listing">['ou$1902': ['employee$2203', 'employee$2209']]</p>
                <p class="listing">]</p>
            </li>
        </ol>
    </body>
</html>
