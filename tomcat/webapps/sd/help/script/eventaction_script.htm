<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="ru-ru" xml:lang="ru-ru" class="no-feedback" data-mc-search-type="Stem" data-mc-help-system-file-name="HelpScripting.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <style></style>
    </head>
    <body>
        <h1 data-mc-conditions="Default.HelpScripting">Скрипт действия по событию</h1>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="description"></a>Описание скрипта</h3>
        <p>С помощью скрипта можно задать действие, которое будет выполняться при наступлении события. </p>
        <p class="Subtitle">Когда выполняется скрипт:</p>
        <p>Асинхронные: Все действия по событиям помещаются в очередь и разбираются в один поток для уменьшения вероятности параллельной модификации одного и того же объекта. </p>
        <p>Синхронные: выполняются сразу же после совершения действия, блокируют интерфейс и могут повлиять на выполнение операции.</p>
        <p class="Subtitle">Результат выполнения скрипта:</p>
        <p>Возвращаемого значения нет. </p>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="var"></a>Переменные контекста и их значения</h3>
        <p>Глобальные переменные контекста:</p>
        <ul>
            <li value="1">
                <p><b>user</b> — пользователь, инициализировавший событие. Является объектом класса <span class="BaseСотрудник">"Сотрудник"&#160;(employee)</span>). </p>
                <p>Если событие инициализировал суперпользователь, 
					то user=null. </p>
                <p>Если событие инициализировано скриптом (скриптовое действие по событию, скрипт на вход в статус), то переменная user берется из контекста инициировавшего его скрипта. </p>
                <p>Пример: пользователь выполнил изменение атрибута --&gt; произошло изменение статуса объекта (действие по событию) --&gt; произошло изменение ответственного (действие на вход в статус) --&gt; произошло оповещение (действие по событию) .Во всех скриптах этой цепочки переменная user должна содержать сторудника, выполнившего первоначальное изменение атрибута.                        </p>
            </li>
            <li value="2"><b>ip</b> — ip пользователя user.</li>
            <li value="3"><b>api</b> — содержит доступные вспомогательные методы. Например api.utils, api.ldap, api.timing,....</li>
            <li value="4"><b>modules</b> — содержит доступные модули, загруженные в интерфейсе технолога (набор библиотек написанных на groovy).</li>
            <li value="5"><b>appVersion</b> — версия приложения.</li>
            <li value="6"><b>logger</b> — объект консоли (для логирования), используется только при выполнении скриптов через консоль.</li>
            <li value="7"><b>utils</b> — Синоним api.utils.</li>
        </ul>
        <p>&#160;</p>
        <ul>
            <li value="1"><b>subject</b> — текущий объект, над которым производится действие (значение переменной может быть null). В переменной subject хранятся значения атрибутов объекта на момент создания действия по событию.</li>
            <li value="2">
                <p><b>oldSubject</b> — объект до выполнения события, в случаях если происходило его изменение (редактирование атрибутов, смена статуса, изменение признака массовости для запроса), иначе — null.</p>
            </li>
            <li value="3"><b>currentSubject</b> — объект, над которым производится действие. В переменной currentSubject хранятся значения атрибутов объекта на момент обработки действия по событию.</li>
        </ul>
        <p>Особенности использования переменных subject, currentSubject и oldSubject в скриптах на действия по событиям: </p>
        <ul style="list-style-type: circle;">
            <li value="1">В зависимости от типа обрабатываемого события, значение переменных может быть "null". Например, в действии по событию "Добавление объекта" есть subject, а oldSubject = null, в действии по событию "Удаление объекта" subject = null, но есть oldSubject, т.к.при удалении объекта уже не&#160;существует текущего объекта.</li>
            <li value="2">При добавлении объектов subject существует (subject!= null), однако многие его атрибуты еще не заполнены (subject['attr_code']== null). Поэтому в скриптах на вход в первый статус <span class="BaseЗарегистрирован">"Зарегистрирован" (registered)</span>, следует получать начальные значения атрибутов с формы добавления используя переменную initialValues.</li>
            <li value="3">Любое действие по событию, даже синхронное, при добавлении объекта срабатывает только после окончания создания объекта, поэтому сама переменная subject и все ее атрибуты будут существовать.</li>
        </ul>
        <ul>
            <li value="1"><b>sourceObject</b> — в случае события "добавление комментария" возвращает комментарий (объект класса "Комментарий").</li>
            <li value="2"><b>notification</b> — оповещение.</li>
            <li value="3">
                <p><b>escalationLevel</b> — уровень эскалации (целое число, начинается с 1). Уровень эскалации характеризует текущую стадию выполнения процедуры эскалации для данного объекта.</p>
            </li>
        </ul>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="features"></a>Особенности скрипта</h3>
        <p>Действия по событию типа "скрипт" бывают двух видов:</p>
        <ul>
            <li value="1">Асинхронные:
        </li>
            <ul style="list-style-type: circle;">
                <li value="1">выполняются в отдельной транзакции;</li>
                <li value="2">р    езультат выполнения скрипта не влияет на выполнение транзакции, сгенерировавшей событие;</li>
                <li value="3">
        порядок выполнения условий и действий не гарантируется, скрипты могут выполняться в любой последовательности;</li>
                <li value="4">        скрипты по событиям могут отработать с некоторой задержкой по сравнению с действием, сгенерировавшим событие.

    </li>
            </ul>
            <li value="2">Синхронные:</li>
            <ul style="list-style-type: circle;">
                <li value="1">
        инициирующее событие, условия выполнения действия и действия по событию выполняются в одной транзакции.
</li>
            </ul>
        </ul>
        <p>Так как каждый скрипт действия по событию может модифицировать объект, который, в свою очередь, может также сгенерировать обрабатываемое событие, то для избегания зацикливания глубина обрабатываемых событий не&#160;превышает 16. </p>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="example"></a>Примеры скрипта</h3>
        <ol>
            <li value="1">
                <p>Скрипт в случае изменения названия объекта добавляет комментарий, содержащий информацию о старом названии:</p>
                <p class="listing">if (oldSubject.title != subject.title) {
api.utils.create('comment', ['text': "Старое название: " + oldSubject.title, 'source' : subject.UUID]);
}</p>
            </li>
            <li value="2">
                <p>Скрипт изменяет статус запроса на предыдущий по истории при добавлении комментария пользователем</p>
                <p class="listing">def ALLOWED_STATES = [</p>
                <p class="listing">
    'resumed',
</p>
                <p class="listing">    'test2']//Коды состояний, из которых можно переводить в предыдущее состояние.
</p>
                <p class="listing">//ОСНОВНОЙ БЛОК--------------------------------------------------------
</p>
                <p class="listing">def stateEvt = utils.lastState(subject)
</p>
                <p class="listing">def lastStateCode = stateEvt.stateCode
</p>
                <p class="listing">def currentStateCode = stateEvt.newStateCode</p>
                <p class="listing">

if (ALLOWED_STATES.contains(subject.state))</p>
                <p class="listing">
{
    </p>
                <p class="listing">utils.edit(subject, ['state' : lastStateCode])
</p>
                <p class="listing">    logger.debug("change sc: " + subject.title + " state from: " + currentStateCode+" to: " + lastStateCode + " successful")
</p>
                <p class="listing">}</p>
            </li>
            <li value="3">
                <p>Скрипт при принятии запроса в персональную ответственность переводит запрос в указанный статус.</p>
                <p class="listing">def ALLOWED_STATES = [</p>
                <p class="listing">'registered',</p>
                <p class="listing">'test3'] //Коды состояний запроса для которых будет работать скрипт.</p>
                <p class="listing">def TARGET_STATE = 'accepted' //Состояние, в которое запрос будет переведен, если запрос принят в персональную ответственность</p>
                <p class="listing">//ОСНОВНОЙ БЛОК--------------------------------------------------------</p>
                <p class="listing">if (subject.responsibleEmployee != null &amp;&amp; ALLOWED_STATES.contains(subject.state))</p>
                <p class="listing">{</p>
                <p class="listing">utils.edit(subject, ['state' : TARGET_STATE])</p>
                <p class="listing">}</p>
            </li>
        </ol>
    </body>
</html>
