<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="ru-ru" xml:lang="ru-ru" class="no-feedback" data-mc-search-type="Stem" data-mc-help-system-file-name="HelpScripting.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <style></style>
    </head>
    <body>
        <h1 data-mc-conditions="Default.HelpScripting">Скрипт условие на вход/выход из статуса</h1>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="description"></a>Описание скрипта</h3>
        <p>С помощью скрипта можно задать ряд условий, которые будут проверяться при попытке перевода объекта в другой статус. Смена статуса объекта будет произведена при выполнении всех условий.</p>
        <p class="Subtitle">Когда выполняется скрипт:</p>
        <ul>
            <li value="1">
                <p>При попытке смены статуса объекта вручную или автоматически. </p>
                <p>В первую очередь выполняется проверка условий выхода из текущего статуса, затем проверяются условия входа в новый статус. Если на вход/выход в/из статус настроено несколько условий, они проверяются одновременно</p>
            </li>
        </ul>
        <p class="Subtitle">Результат выполнения скрипта:</p>
        <p>Скрипт возвращает значение "null"/пустую строку или выводит сообщение об ошибке, которое задается в скрипте.</p>
        <p>Если все скрипты-условия вернули "null"/пустую строку, то происходит смена статуса. </p>
        <p>Если хотя бы один скрипт-условие вернул сообщение об ошибке, то смены статуса не&#160;происходит. Сообщение об ошибке записывается в лог. Если смена статуса производится вручную из интерфейса пользователя,
			то сообщение об ошибке отобразится пользователю.</p>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="var"></a>Переменные контекста и их значения</h3>
        <p>Глобальные переменные контекста:</p>
        <ul>
            <li value="1">
                <p><b>user</b> — пользователь, инициализировавший событие. Является объектом класса <span class="BaseСотрудник">"Сотрудник"&#160;(employee)</span>). </p>
                <p>Если событие инициализировал суперпользователь, 
					то user=null. </p>
                <p>Если событие инициализировано скриптом (скриптовое действие по событию, скрипт на вход в статус), то переменная user берется из контекста инициировавшего его скрипта. </p>
                <p>Пример: пользователь выполнил изменение атрибута --&gt; произошло изменение статуса объекта (действие по событию) --&gt; произошло изменение ответственного (действие на вход в статус) --&gt; произошло оповещение (действие по событию) .Во всех скриптах этой цепочки переменная user должна содержать сторудника, выполнившего первоначальное изменение атрибута.                        </p>
            </li>
            <li value="2"><b>ip</b> — ip пользователя user.</li>
            <li value="3"><b>api</b> — содержит доступные вспомогательные методы. Например api.utils, api.ldap, api.timing,....</li>
            <li value="4"><b>modules</b> — содержит доступные модули, загруженные в интерфейсе технолога (набор библиотек написанных на groovy).</li>
            <li value="5"><b>appVersion</b> — версия приложения.</li>
            <li value="6"><b>logger</b> — объект консоли (для логирования), используется только при выполнении скриптов через консоль.</li>
            <li value="7"><b>utils</b> — Синоним api.utils.</li>
        </ul>
        <p>&#160;</p>
        <ul>
            <li value="1"><b>subject</b> — текущий объект, статус которого изменяется;</li>
            <li value="2">
                <p><b>initialValues</b> — значение атрибута, заполненное на форме добавления объекта (при входе в статус <span class="BaseЗарегистрирован">"Зарегистрирован" (registered)</span>) и на форме смены статуса. </p>
                <p>Пример:</p>
                <p class="listing"> initialValues.getProperty('service');</p>
                <p class="listing"> initialValues.getProperty('client');</p>
                <p>У определенного атрибутв можно получить его свойства:</p>
                <p class="listing">def uuid = client.UUID;// UUID</p>
                <p class="listing">def title = client.title;// Название атрибута</p>
                <p>Значение атрибута <span class="BaseОтветственный">"Ответственный"&#160;(responsible)</span>:</p>
                <p class="listing"> initialValues.getProperty('responsible');</p>
                <p class="listing">def team = resp.team;// ответственная команда</p>
                <p class="listing">def employee = resp.employee;// ответственный сотрудник</p>
            </li>
            <li value="3"><b>comment</b> — текст комментария, заполненный при смене статуса.</li>
        </ul>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="features"></a>Особенности скрипта</h3>
        <ul>
            <li value="1">Скрипты на вход/выход из/в статуса выполняются в той же транзакции, что и бизнес-операция смены статуса.</li>
            <li value="2">Проверяются все условия, даже если одно или несколько из них завершились с ошибкой. </li>
            <li value="3">
                <p>Причиной ошибки выполнения скрипта могут являться ограничения, связанные с редактированием подчиненных запросов. Редактирование некоторых атрибутов подчиненного запроса запрещено.</p>
                <p>Проверка, является ли запрос подчиненным:</p>
                <p class="listing">if (subject.masterMassProblem != null)</p>
                <p class="listing">{ // запрос является подчиненным }</p>
            </li>
        </ul>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="example"></a>Примеры скрипта</h3>
        <ol>
            <li value="1">
                <p>Скрипт проверяет, что значение атрибута отличается от значения по умолчанию.</p>
                <p class="listing">def ATTR_CODE = '';   // Код атрибута, значение которого надо проверить</p>
                <p class="listing">//ОСНОВНОЙ БЛОК--------------------------------------------------------</p>
                <p class="listing">if(utils.equalsDefaultValue(subject, ATTR_CODE))</p>
                <p class="listing">{</p>
                <p class="listing">return "Значение атрибута '" + ATTR_CODE +"' совпадает со значением по умолчанию";</p>
                <p class="listing">}</p>
                <p class="listing">return null;</p>
            </li>
            <li value="2">
                <p>Скрипт задает условие — производить действие только при изменении атрибута "Название".</p>
                <p class="listing">if(oldSubject.title != subject.title)</p>
                <p class="listing">{</p>
                <p class="listing">return null;</p>
                <p class="listing">}</p>
                <p class="listing">return 'Заданное условие не выполнилось';</p>
            </li>
            <li value="3" data-mc-conditions="">
                <p>Скрипт разрешает переход в статус только если указан ответственный.</p>
                <p class="listing">def correctState = 'waitingEngineer';</p>
                <p class="listing">if(subject.responsible != null) {</p>
                <p class="listing">return null;</p>
                <p class="listing">}</p>
                <p class="listing">return 'Запрос принят в ответственность'</p>
            </li>
        </ol>
    </body>
</html>
