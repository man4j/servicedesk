<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="ru-ru" xml:lang="ru-ru" class="no-feedback" data-mc-search-type="Stem" data-mc-help-system-file-name="HelpScripting.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" />
        <style></style>
    </head>
    <body>
        <h1 data-mc-conditions="Default.HelpScripting">Скрипт условия действия по событию</h1>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="description"></a>Описание скрипта</h3>
        <p>С помощью скрипта можно задать ряд условий, которые будут проверяться при попытке выполнения действия. Скрипт выполняет проверку условий выполнения действия по событию.</p>
        <p class="Subtitle">Когда выполняется скрипт:</p>
        <p>Скрипт выполняется при наступлении действия, инициирующего событие.</p>
        <p class="Subtitle">Результат выполнения скрипта:</p>
        <p>Скрипт возвращает значение "null"/пустую строку или выводит сообщение об ошибке, если оно задано в скрипте.</p>
        <p>
				Если все скрипты-условия вернули "null"/пустую строку, то действие выполняется. 
</p>
        <p>Если хотя бы один скрипт-условие вернул сообщение об ошибке, то действие не&#160;выполняется. Сообщение об ошибке записывается в лог.
</p>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="var"></a>Переменные контекста и их значения</h3>
        <p>Глобальные переменные контекста:</p>
        <ul>
            <li value="1">
                <p><b>user</b> — пользователь, инициализировавший событие. Является объектом класса <span class="BaseСотрудник">"Сотрудник"&#160;(employee)</span>). </p>
                <p>Если событие инициализировал суперпользователь, 
					то user=null. </p>
                <p>Если событие инициализировано скриптом (скриптовое действие по событию, скрипт на вход в статус), то переменная user берется из контекста инициировавшего его скрипта. </p>
                <p>Пример: пользователь выполнил изменение атрибута --&gt; произошло изменение статуса объекта (действие по событию) --&gt; произошло изменение ответственного (действие на вход в статус) --&gt; произошло оповещение (действие по событию) .Во всех скриптах этой цепочки переменная user должна содержать сторудника, выполнившего первоначальное изменение атрибута.                        </p>
            </li>
            <li value="2"><b>ip</b> — ip пользователя user.</li>
            <li value="3"><b>api</b> — содержит доступные вспомогательные методы. Например api.utils, api.ldap, api.timing,....</li>
            <li value="4"><b>modules</b> — содержит доступные модули, загруженные в интерфейсе технолога (набор библиотек написанных на groovy).</li>
            <li value="5"><b>appVersion</b> — версия приложения.</li>
            <li value="6"><b>logger</b> — объект консоли (для логирования), используется только при выполнении скриптов через консоль.</li>
            <li value="7"><b>utils</b> — Синоним api.utils.</li>
        </ul>
        <p>&#160;</p>
        <ul>
            <li value="1"><b>subject</b> — текущий объект, над которым производится действие (значение переменной может быть null). В переменной subject хранятся значения атрибутов объекта на момент создания действия по событию.</li>
            <li value="2">
                <p><b>oldSubject</b> — объект до выполнения события, в случаях если происходило его изменение (редактирование атрибутов, смена статуса, изменение признака массовости для запроса), иначе — null.</p>
            </li>
            <li value="3"><b>currentSubject</b> — объект, над которым производится действие. В переменной currentSubject хранятся значения атрибутов объекта на момент обработки действия по событию.</li>
        </ul>
        <p>Особенности использования переменных subject, currentSubject и oldSubject в скриптах на действия по событиям: </p>
        <ul style="list-style-type: circle;">
            <li value="1">В зависимости от типа обрабатываемого события, значение переменных может быть "null". Например, в действии по событию "Добавление объекта" есть subject, а oldSubject = null, в действии по событию "Удаление объекта" subject = null, но есть oldSubject, т.к.при удалении объекта уже не&#160;существует текущего объекта.</li>
            <li value="2">При добавлении объектов subject существует (subject!= null), однако многие его атрибуты еще не заполнены (subject['attr_code']== null). Поэтому в скриптах на вход в первый статус <span class="BaseЗарегистрирован">"Зарегистрирован" (registered)</span>, следует получать начальные значения атрибутов с формы добавления используя переменную initialValues.</li>
            <li value="3">Любое действие по событию, даже синхронное, при добавлении объекта срабатывает только после окончания создания объекта, поэтому сама переменная subject и все ее атрибуты будут существовать.</li>
        </ul>
        <ul>
            <li value="1"><b>sourceObject</b> — в случае события "добавление комментария" возвращает комментарий (объект класса "Комментарий").</li>
            <li value="2"><b>escalationLevel</b> — уровень эскалации (целое число, начинается с 1). Уровень эскалации характеризует текущую стадию выполнения процедуры эскалации для данного объекта.</li>
        </ul>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="features"></a>Особенности скрипта</h3>
        <p>Скрипт-условие действия по событию выполняется в той же транзакции, что и само действие по событию. </p>
        <h3 data-mc-conditions="Default.HelpScripting"><a name="example"></a>Примеры скрипта</h3>
        <ol>
            <li value="1">
                <p>Скрипт проверяет, что запрос находится в статусе, отличном от заданного, и не&#160;находится в персональной ответственности:</p>
                <p class="listing">def STATE  = 'registered'   // Код статуса</p>
                <p class="listing">//ОСНОВНОЙ БЛОК--------------------------------------------------------</p>
                <p class="listing">if (subject.responsibleEmployee != null || subject.state == STATE)</p>
                <p class="listing">{</p>
                <p class="listing">return "Заданные условия не выполнились."</p>
                <p class="listing">}</p>
            </li>
            <li value="2">
                <p>Скрипт проверяет, был ли добавлен комментарий в рамках смены статуса:</p>
                <p class="listing">// логическая переменная, если значение true, то проверяем добавление в рамках смены статуса, если false, то не в рамках смены статуса.</p>
                <p class="listing">def IN_CHANGE_STATE = true</p>
                <p class="listing">//ОСНОВНОЙ БЛОК--------------------------------------------------------</p>
                <p class="listing">if(IN_CHANGE_STATE == (comment != null))</p>
                <p class="listing">{</p>
                <p class="listing">return ""</p>
                <p class="listing">}</p>
                <p class="listing">return "условие не выполнилось"</p>
            </li>
            <li value="3">
                <p>Скрипт проверяет, что объект находится/не находится в одном из перечисленных статусов:</p>
                <p class="listing">def STATES = [</p>
                <p class="listing">'resolved',</p>
                <p class="listing">'state2']   // Коды статусов</p>
                <p class="listing">def CONTAINS = true             // логическая переменная: содержит или не содержит</p>
                <p class="listing">//ОСНОВНОЙ БЛОК--------------------------------------------------------</p>
                <p class="listing">return STATES.contains(subject.state) == CONTAINS ? "" : "Статус не соответствует."</p>
            </li>
        </ol>
    </body>
</html>
